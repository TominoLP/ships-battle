# =============================
# 1) Front-end build (Node)
# =============================
FROM node:20-alpine AS fe
WORKDIR /app

# Use Yarn 4 via Corepack. If you prefer npm, just keep package-lock.json and drop yarn.lock.
COPY package.json yarn.lock ./
RUN corepack enable && corepack prepare yarn@4.4.1 --activate \
 && yarn config set nodeLinker node-modules

# Disable Wayfinder during Docker builds so Vite won't call `php artisan`
ARG VITE_ENABLE_WAYFINDER=false
ENV VITE_ENABLE_WAYFINDER=${VITE_ENABLE_WAYFINDER}

RUN yarn install --immutable
COPY . .
RUN yarn build


# =============================
# 2) Composer deps (no-dev)
# =============================
FROM composer:2 AS vendor
WORKDIR /app
COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --no-scripts
COPY . .
RUN composer install --no-dev --prefer-dist --no-interaction


# =============================
# 3) Runtime: PHP-FPM + Nginx + Reverb
# =============================
FROM php:8.3-fpm

# ---- System packages & PHP extensions ----
RUN apt-get update && apt-get install -y --no-install-recommends \
    nginx supervisor git curl zip unzip ca-certificates \
    libpng-dev libonig-dev libxml2-dev libzip-dev \
    sqlite3 libsqlite3-dev pkg-config \
 && docker-php-ext-install pdo pdo_sqlite mbstring exif pcntl bcmath gd zip \
 && rm -rf /var/lib/apt/lists/*

# ---- Composer binary ----
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html

# ---- App code + vendor + built assets ----
COPY . .
COPY --from=vendor /app/vendor ./vendor
COPY --from=fe /app/public/build ./public/build

# ---- (Optional) Remove dev-only providers so prod boots with --no-dev ----
RUN set -eux; \
  sed -i '/PailServiceProvider/d' config/app.php || true; \
  sed -i '/CollisionServiceProvider/d' config/app.php || true

# ---- Nginx config (serve app + proxy Reverb WS) ----
RUN set -eux; \
  rm -f /etc/nginx/conf.d/default.conf; \
  cat > /etc/nginx/conf.d/default.conf <<'NGINXCONF'
server {
    listen 80;
    server_name _;

    root /var/www/html/public;
    index index.php;

    # Static (Vite build)
    location /build/ {
        try_files $uri =404;
        access_log off;
        expires 7d;
    }

    # Laravel front controller
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_read_timeout 60s;
    }

    # Reverb WebSocket proxy
    location /app/reverb {
        proxy_pass         http://127.0.0.1:8080;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection "Upgrade";
        proxy_set_header   Host $host;
        proxy_read_timeout 60s;
    }
}
NGINXCONF

# ---- Supervisor (php-fpm, nginx, reverb) ----
RUN set -eux; \
  mkdir -p /etc/supervisor/conf.d; \
  cat > /etc/supervisor/conf.d/supervisord.conf <<'SUPERVISOR'
[supervisord]
nodaemon=true
user=root
logfile=/dev/null
pidfile=/var/run/supervisord.pid

[program:php-fpm]
command=/usr/local/sbin/php-fpm -F
autostart=true
autorestart=true
priority=10

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
priority=20

[program:reverb]
directory=/var/www/html
command=php artisan reverb:start --host=0.0.0.0 --port=8080
autostart=true
autorestart=true
priority=30
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/2
stderr_logfile_maxbytes=0
SUPERVISOR

# ---- Entrypoint: create SQLite, APP_KEY, optimize, migrate ----
RUN printf '%s\n' '#!/usr/bin/env bash' \
'set -e' \
'cd /var/www/html' \
'' \
'# Ensure SQLite file exists (runtime)' \
'if [ "${DB_CONNECTION:-sqlite}" = "sqlite" ]; then' \
'  DB_PATH="${DB_DATABASE:-/var/www/html/storage/database/database.sqlite}"' \
'  mkdir -p "$(dirname "$DB_PATH")"' \
'  if [ ! -f "$DB_PATH" ]; then touch "$DB_PATH"; fi' \
'  chown -R www-data:www-data "$(dirname "$DB_PATH")"' \
'  chmod 664 "$DB_PATH" || true' \
'fi' \
'' \
'# Generate APP_KEY if not provided by env-file' \
'if [ -z "${APP_KEY}" ] || [ "${APP_KEY}" = "base64:" ]; then' \
'  php artisan key:generate --force || true' \
'fi' \
'' \
'php artisan optimize || true' \
'' \
'# Auto-migrate (disable via RUN_MIGRATIONS=0)' \
'if [ "${RUN_MIGRATIONS:-1}" = "1" ]; then' \
'  php artisan migrate --force || true' \
'fi' \
'' \
'exec "$@"' > /entrypoint.sh \
 && chmod +x /entrypoint.sh

# ---- Permissions ----
RUN chown -R www-data:www-data storage bootstrap/cache \
 && chmod -R ug+rwx storage bootstrap/cache

EXPOSE 80
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisord","-n","-c","/etc/supervisor/conf.d/supervisord.conf"]
