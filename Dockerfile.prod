# =========================================================
# 1) Front-end build (Node + Vite + Wayfinder)
# =========================================================
FROM node:20-alpine AS fe
WORKDIR /app

COPY package.json yarn.lock ./
RUN corepack enable && corepack prepare yarn@4.4.1 --activate \
 && yarn config set nodeLinker node-modules \
 && yarn install --immutable

# Copy only what's needed for build
COPY resources ./resources
COPY vite.config.ts vite.config.docker.ts tsconfig.json ./

# Use Docker-specific vite config (without wayfinder)
RUN cp vite.config.docker.ts vite.config.ts

RUN yarn build


# =========================================================
# 2) Backend dependencies (Composer)
# =========================================================
FROM composer:2 AS vendor
WORKDIR /app
COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --no-interaction --no-scripts --optimize-autoloader


# =========================================================
# 3) Runtime (PHP-FPM + Nginx + Reverb) - ALPINE BASE
# =========================================================
FROM php:8.3-fpm-alpine

# ---- System & PHP deps ----
RUN apk add --no-cache \
    nginx \
    supervisor \
    sqlite \
    sqlite-dev \
    libzip-dev \
    && docker-php-ext-install pdo pdo_sqlite bcmath pcntl \
    && rm -rf /var/cache/apk/*

WORKDIR /var/www/html

# ---- Copy Application Files (SELECTIVE - NO vendor/node_modules) ----
COPY --chown=www-data:www-data app ./app
COPY --chown=www-data:www-data bootstrap ./bootstrap
COPY --chown=www-data:www-data config ./config
COPY --chown=www-data:www-data database ./database
COPY --chown=www-data:www-data public ./public
COPY --chown=www-data:www-data resources ./resources
COPY --chown=www-data:www-data routes ./routes
COPY --chown=www-data:www-data storage ./storage
COPY --chown=www-data:www-data artisan composer.json composer.lock ./

# ---- Copy built artifacts from multi-stage builds ----
COPY --chown=www-data:www-data --from=vendor /app/vendor ./vendor
COPY --chown=www-data:www-data --from=fe /app/public/build ./public/build

# ---- Fix storage permissions ----
RUN mkdir -p storage/framework/{sessions,views,cache} \
    storage/logs \
    bootstrap/cache \
 && chown -R www-data:www-data storage bootstrap/cache \
 && chmod -R 775 storage bootstrap/cache

# =========================================================
# Nginx Configuration
# =========================================================
RUN rm -f /etc/nginx/http.d/default.conf && cat > /etc/nginx/http.d/laravel.conf <<'NGINX'
server {
    listen 80;
    server_name _;

    root /var/www/html/public;
    index index.php;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location /build/ {
        try_files $uri =404;
        access_log off;
        expires 7d;
    }

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_pass 127.0.0.1:9000;
    }

    # Reverb WebSocket proxy
    location /app/reverb {
        proxy_pass         http://127.0.0.1:8080;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection "Upgrade";
        proxy_set_header   Host $host;
        proxy_read_timeout 60s;
    }
}
NGINX

# =========================================================
# Supervisor (FPM + Nginx + Reverb)
# =========================================================
RUN mkdir -p /etc/supervisor/conf.d && cat > /etc/supervisor/conf.d/supervisord.conf <<'SUPERVISOR'
[supervisord]
nodaemon=true
logfile=/dev/null
logfile_maxbytes=0

[program:php-fpm]
command=/usr/local/sbin/php-fpm -F
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:reverb]
directory=/var/www/html
command=php artisan reverb:start --host=0.0.0.0 --port=8080
user=www-data
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
SUPERVISOR

# =========================================================
# Entrypoint (Laravel boot + migrations)
# =========================================================
COPY --chmod=755 entrypoint.sh /entrypoint.sh

EXPOSE 80
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisord","-c","/etc/supervisor/conf.d/supervisord.conf"]